{"ast":null,"code":"var _jsxFileName = \"B:\\\\henry\\\\FT-M2-master\\\\FT-M2-master\\\\08-React-Estado-LifeCycle\\\\homework\\\\src\\\\containers\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Nav from '../components/Nav/Nav.jsx';\nimport Cards from '../components/Cards/Cards.jsx';\nimport Buttons from '../components/Buttons/Buttons.jsx';\nimport Ciudad from '../components/Ciudad/Ciudad.jsx';\nimport './App.css';\nimport { Route } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [ciudades, setCiudades] = useState([]);\n  const {\n    REACT_APP_API_KEY\n  } = process.env;\n\n  function onSearch(ciudad) {\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${REACT_APP_API_KEY}&units=metric`).then(respuesta => {\n      return respuesta.json();\n    }).then(informacion => {\n      const nuevaCiudad = {\n        min: Math.round(informacion.main.temp_min),\n        max: Math.round(informacion.main.temp_max),\n        img: informacion.weather[0].icon,\n        id: informacion.id,\n        wind: informacion.wind.speed,\n        temp: informacion.main.temp,\n        name: informacion.name,\n        weather: informacion.weather[0].main,\n        clouds: informacion.clouds.all,\n        latitud: informacion.coord.lat,\n        longitud: informacion.coord.lon\n      };\n      const ciudadEncontrada = ciudades.find(ciudad => ciudad.id === nuevaCiudad.id);\n      if (ciudadEncontrada) return alert(\"la ciudad ya se encuentra!\");else setCiudades(todasLasCiudadesActuales => [...todasLasCiudadesActuales, nuevaCiudad]);\n    });\n  }\n\n  function onClose(id) {\n    const ciudadFiltrada = ciudades.filter(ciudad => ciudad.id !== id);\n    setCiudades(ciudadFiltrada);\n  }\n\n  function onFilter(cityId) {\n    const ciudad = ciudades.find(city => city.id === parseInt(cityId));\n    console.log(ciudad);\n    return ciudad;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      onSearch: onSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"line2\",\n      children: /*#__PURE__*/_jsxDEV(Buttons, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"background\",\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        children: /*#__PURE__*/_jsxDEV(Cards, {\n          cities: ciudades,\n          onClose: onClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/ciudad/:id\",\n        render: _ref => {\n          let {\n            match\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(Ciudad, {\n            city: onFilter(match.params.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 59\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"n+tnLJafBB1eA00BhgrqtarsVZY=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["B:/henry/FT-M2-master/FT-M2-master/08-React-Estado-LifeCycle/homework/src/containers/App.js"],"names":["React","useState","Nav","Cards","Buttons","Ciudad","Route","App","ciudades","setCiudades","REACT_APP_API_KEY","process","env","onSearch","ciudad","fetch","then","respuesta","json","informacion","nuevaCiudad","min","Math","round","main","temp_min","max","temp_max","img","weather","icon","id","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","ciudadEncontrada","find","alert","todasLasCiudadesActuales","onClose","ciudadFiltrada","filter","onFilter","cityId","city","parseInt","console","log","match","params"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,GAAP,MAAgB,2BAAhB;AACA,OAAOC,KAAP,MAAkB,+BAAlB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,OAAOC,MAAP,MAAmB,iCAAnB;AACA,OAAO,WAAP;AACA,SAASC,KAAT,QAAsB,kBAAtB;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAG5B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAM;AAAES,IAAAA;AAAF,MAAwBC,OAAO,CAACC,GAAtC;;AAEA,WAASC,QAAT,CAAkBC,MAAlB,EAA0B;AACxBC,IAAAA,KAAK,CAAE,oDAAmDD,MAAO,UAASJ,iBAAkB,eAAvF,CAAL,CACKM,IADL,CACWC,SAAD,IAAe;AACb,aAAOA,SAAS,CAACC,IAAV,EAAP;AACP,KAHL,EAIKF,IAJL,CAIWG,WAAD,IAAiB;AACjB,YAAMC,WAAW,GAAG;AAClBC,QAAAA,GAAG,EAAEC,IAAI,CAACC,KAAL,CAAWJ,WAAW,CAACK,IAAZ,CAAiBC,QAA5B,CADa;AAElBC,QAAAA,GAAG,EAAEJ,IAAI,CAACC,KAAL,CAAWJ,WAAW,CAACK,IAAZ,CAAiBG,QAA5B,CAFa;AAGlBC,QAAAA,GAAG,EAAET,WAAW,CAACU,OAAZ,CAAoB,CAApB,EAAuBC,IAHV;AAIlBC,QAAAA,EAAE,EAAEZ,WAAW,CAACY,EAJE;AAKlBC,QAAAA,IAAI,EAAEb,WAAW,CAACa,IAAZ,CAAiBC,KALL;AAMlBC,QAAAA,IAAI,EAAEf,WAAW,CAACK,IAAZ,CAAiBU,IANL;AAOlBC,QAAAA,IAAI,EAAEhB,WAAW,CAACgB,IAPA;AAQlBN,QAAAA,OAAO,EAAEV,WAAW,CAACU,OAAZ,CAAoB,CAApB,EAAuBL,IARd;AASlBY,QAAAA,MAAM,EAAEjB,WAAW,CAACiB,MAAZ,CAAmBC,GATT;AAUlBC,QAAAA,OAAO,EAAEnB,WAAW,CAACoB,KAAZ,CAAkBC,GAVT;AAWlBC,QAAAA,QAAQ,EAAEtB,WAAW,CAACoB,KAAZ,CAAkBG;AAXV,OAApB;AAcA,YAAMC,gBAAgB,GAAGnC,QAAQ,CAACoC,IAAT,CAAc9B,MAAM,IAAIA,MAAM,CAACiB,EAAP,KAAcX,WAAW,CAACW,EAAlD,CAAzB;AACA,UAAGY,gBAAH,EAAqB,OAAOE,KAAK,CAAC,4BAAD,CAAZ,CAArB,KACKpC,WAAW,CAAEqC,wBAAD,IAA8B,CAAC,GAAGA,wBAAJ,EAA8B1B,WAA9B,CAA/B,CAAX;AAEN,KAvBT;AAwBD;;AAGD,WAAS2B,OAAT,CAAiBhB,EAAjB,EAAqB;AAEnB,UAAMiB,cAAc,GAAGxC,QAAQ,CAACyC,MAAT,CAAgBnC,MAAM,IAAIA,MAAM,CAACiB,EAAP,KAAcA,EAAxC,CAAvB;AAEAtB,IAAAA,WAAW,CAACuC,cAAD,CAAX;AAED;;AAED,WAASE,QAAT,CAAkBC,MAAlB,EAAyB;AACvB,UAAMrC,MAAM,GAAEN,QAAQ,CAACoC,IAAT,CAAcQ,IAAI,IAAIA,IAAI,CAACrB,EAAL,KAAYsB,QAAQ,CAACF,MAAD,CAA1C,CAAd;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYzC,MAAZ;AACA,WAAOA,MAAP;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACQ,QAAC,GAAD;AAAK,MAAA,QAAQ,EAAED;AAAf;AAAA;AAAA;AAAA;AAAA,YADR,eAEQ;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,6BACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFR,eAKQ;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YALR,eAMM;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,GAAZ;AAAgB,QAAA,KAAK,MAArB;AAAA,+BACA,QAAC,KAAD;AAAO,UAAA,MAAM,EAAEL,QAAf;AAAyB,UAAA,OAAO,EAAEuC;AAAlC;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,MAAM,EAAE;AAAA,cAAC;AAACS,YAAAA;AAAD,WAAD;AAAA,8BAAY,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAEN,QAAQ,CAACM,KAAK,CAACC,MAAN,CAAa1B,EAAd;AAAtB;AAAA;AAAA;AAAA;AAAA,kBAAZ;AAAA;AAAlC;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YANN;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAjEuBxB,G;;KAAAA,G","sourcesContent":["import React, { useState } from 'react';\r\nimport Nav from '../components/Nav/Nav.jsx';\r\nimport Cards from '../components/Cards/Cards.jsx';\r\nimport Buttons from '../components/Buttons/Buttons.jsx'\r\nimport Ciudad from '../components/Ciudad/Ciudad.jsx'\r\nimport './App.css';\r\nimport { Route } from 'react-router-dom';\r\n\r\nexport default function App() {\r\n\r\n\r\n  const [ciudades, setCiudades] = useState([])\r\n\r\n  const { REACT_APP_API_KEY } = process.env\r\n\r\n  function onSearch(ciudad) {\r\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${REACT_APP_API_KEY}&units=metric`)\r\n        .then((respuesta) => {\r\n                return respuesta.json()\r\n        })\r\n        .then((informacion) => {\r\n              const nuevaCiudad = {\r\n                min: Math.round(informacion.main.temp_min),\r\n                max: Math.round(informacion.main.temp_max),\r\n                img: informacion.weather[0].icon,\r\n                id: informacion.id,\r\n                wind: informacion.wind.speed,\r\n                temp: informacion.main.temp,\r\n                name: informacion.name,\r\n                weather: informacion.weather[0].main,\r\n                clouds: informacion.clouds.all,\r\n                latitud: informacion.coord.lat,\r\n                longitud: informacion.coord.lon \r\n              }\r\n\r\n              const ciudadEncontrada = ciudades.find(ciudad => ciudad.id === nuevaCiudad.id)\r\n              if(ciudadEncontrada) return alert(\"la ciudad ya se encuentra!\")\r\n              else setCiudades((todasLasCiudadesActuales) => [...todasLasCiudadesActuales, nuevaCiudad]);\r\n              \r\n            })\r\n  }\r\n  \r\n\r\n  function onClose(id) {\r\n\r\n    const ciudadFiltrada = ciudades.filter(ciudad => ciudad.id !== id)\r\n\r\n    setCiudades(ciudadFiltrada);\r\n\r\n  }\r\n\r\n  function onFilter(cityId){\r\n    const ciudad= ciudades.find(city => city.id === parseInt(cityId))\r\n    console.log(ciudad)\r\n    return ciudad\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n            <Nav onSearch={onSearch}/>\r\n            <div className='line2'>\r\n              <Buttons/>\r\n            </div>\r\n            <div className='line'></div>\r\n          <div className=\"background\">\r\n            <Route path='/' exact>\r\n            <Cards cities={ciudades} onClose={onClose}/>\r\n            </Route>\r\n\r\n            <Route path='/ciudad/:id' render={({match})=> <Ciudad city={onFilter(match.params.id)}/>}/>\r\n            </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}